type: link
name: XSL:FO
location: https://en.wikipedia.org/wiki/XSL_Formatting_Objects
description: |
    XSL Formatting Objects is a markup language for XML document formatting that is most often used to generate PDF files. XSL-FO is part of XSL (Extensible Stylesheet Language), a set of W3C technologies designed for the transformation and formatting of XML data. The other parts of XSL are XSLT and XPath. Version 1.1 of XSL-FO was published in 2006. 
    
    XSL-FO is considered feature complete by W3C
notes:
    - no single processor (FOP, Antenna House, etc) 100% supports XSL:FO
---
type: link
name: XFA
location: https://en.wikipedia.org/wiki/XFA
description: XFA (also known as XFA forms) stands for XML Forms Architecture, a family of proprietary XML specifications that was suggested and developed by JetForm to enhance the processing of web forms. It can be also used in PDF files starting with PDF 1.5 specification. XFA specification is referenced as an external specification indispensable for the application of ISO 32000-1 specification (PDF 1.7). XML Forms Architecture was not standardized as an ISO standard.
notes:
    - avoid
    - not standard
    - not 'open'
    - "most pdf processors do not handle XFA content"
---
type: link
name: Apache FOP
location: https://en.wikipedia.org/wiki/Apache_FOP_(Formatting_Objects_Processor)
description: Formatting Objects Processor (FOP, also known as Apache FOP) is a Java application that converts XSL Formatting Objects (XSL-FO) files to PDF or other printable formats. FOP is open source software, and is distributed under the Apache License 2.0.
notes:
    - "Most important elements added in XSL-FO 1.1 (flow maps, table markers, indexes. etc.) are not available"
    - "older XSL-FO 1.0 features are still not fully supported including automatic table layout, floats and more."
    - multiple output formats with PDF being the best, but also ASCII, postscript, image formats, Java2D
---
type: link
name: TCPDF
location: https://github.com/tecnickcom/tcpdf
description: PHP library for generating PDF documents on-the-fly.
notes:
    - "A new version of this library is under development at https://github.com/tecnickcom/tc-lib-pdf and as a consequence this version will not receive any additional development or support. This version should be considered obsolete ..."
    - new version isn't complete or stable
    - I still see development happening
---
type:elife-xml-to-pdf-candidate
name: JATS2LaTeX -> pdflatex -> PDF
conversion-type: JATS -> LaTeX -> PDF
location: https://github.com/Vitaliy-1/JATS2LaTeX
references:
    - https://forum.pkp.sfu.ca/t/jats-xml-to-pdf-converter/30554
licence: GPL3
languages:
    - java
    - tex
    - latex
    - texlive (pdflatex)
examples:
    - https://github.com/Vitaliy-1/JATS2LaTeX/tree/master/example
evaluation:
    - an example of a sprawling barely-structured codebase relying on a specific idiomatic usage of JATS
    - does not work 09560 v1 xml, a null pointer exception traced to extraction of metadata
    - immature code, immature codebase
    - verbose code
    - lots of repetition
    - no architecture to allow extending or customising
decision:
    - avoid
---
type: elife-xml-to-pdf-candidate
name: CaSSius
conversion-type: XML -> HTML+CSS+JS -> PDF
location: https://github.com/MartinPaulEve/CaSSius
description: a tool to create beautiful paginated PDF documents from HTML content using CSS regions
references:
    - https://www.martineve.com/2016/06/19/cassius-now-supports-full-headless-pdf-creation-from-jats/
licence: AGPL3
languages:
    - xslt
    - python
    - html/css
    - javascript
examples:
    - https://www.martineve.com/cassius/sample.pdf
notes:
    - feels like a kludge of web technologies
    - the XML -> HTML+etal step is a mix of Python and xsl
    - no tests
    - output examples are ok, but not *that* great. I mean, the author really talks up how pretty the results are
    - from the javascript, it looks like the pages are being added after the polyfill. 
    - loading just the html (for inspecting) causes firefox to slow down and timeout constantly. I have no idea what is causing it
evaluation:
    - generating the special HTML required for cassius was straight forward
    - the browser rendering (firefox 62.0.3) displayed incorrectly with all pages on the first page and 49 blank pages
    - browser rendering was quite slow
    - browser printing was very slow
    - headless printing with wkhtmlpdf is not so bad
    - javascript is broken and the distinction between print/screen is ambiguous when using firefox/chrome to debug, which is infuriating
decision:
    - skip cassius unless we do it from scratch and understand what is happening at each step, including the xslt
    - out of the box it doesn't work for elife xml
    - with some hours of debugging and tweaking it still doesn't work
---
type:elife-xml-to-pdf-candidate
name: Pandoc
location: http://pandoc.org/MANUAL.html
description: Pandoc is a Haskell library for converting from one markup format to another
references:
    - http://pandoc.org/MANUAL.html#input-formats
notes:
    - pandoc support JATS XML as an input (reader) and output (writer)
    - support is still *alpha* quality
        - ref: https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/JATS.hs#L27
    - Ubuntu 18.10 has a recent enough version to use
    - works but converting to an intermediate 'Pandoc' type
    - the output template to be used can be seen with `--print-default-template=latex`
    - custom output templates can be provided with `--template`
    - if our usage of JATS is *more* descriptive than the Pandoc type, the transformation will be lossy
    - we might be able to see what is lost by doing XML->PANDOC->XML and comparing in vs out
    - is the JATS reader lossy? [yes]. will it read everything? [no] https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/JATS.hs
        - 'abstract' is not being read, for example
        - to modify you'll need to learn haskell
        - it *is* wonderfully compact code
evaluation:
    - there seems to be little in the way of translating jats XML->latex, I thought there would be more
    - pdf output out of the box is impressive in terms of coverage
        - bookmarks, footnotes present
        - no images yet but I was only targeting the xml
        - tables are absent
        - abstract is absent
    - the conversion from XML->latex is lossy
    - to capture the missing bits, custom filters would have to be written for the Pandoc AST, or the haskell reader modified
    - filters: https://pandoc.org/filters.html
    - we already have an elife-XML->JSON scraper (elife-tools+bot-lax)
    - the latex template used by Pandoc could very easily be translated to mustache/jinja/whatever and combined with the article-json
decision:
    - promising
    - if we are really keen on making this usable by non-elife people, we would go with pandoc and learn haskell or write loads of filter code

---
type:elife-xml-to-pdf-candidate
name: NCBI NLM Preview XSLT stylesheets
location: https://github.com/ncbi/JATSPreviewStylesheets
description: These stylesheets provide preview display of journal articles tagged using NISO JATS version 1.0 
references:
    - https://www.ncbi.nlm.nih.gov/books/NBK189779/
notes:
    - only Saxon HE (Home Edition) is Open Source
    - the guide on this site is recommending stylesheets that require paid-for versions of Saxon (PE and higher)
    - Apache FOP can't handle the transformation of xml to fo using xsl
    - using Saxon to generate the .fo file and FOP to generate the pdf, you *almost* get there.
    - adding euclid for the mathml helps
    - still left with two java stacktraces that offer zero insight into what the problem is
    - cutting out sections of the fo file and re-running the transformation isn't a great way to debug
    - no success, see notes.txt
---
type:elife-xml-to-pdf-candidate
name: JATSKit Preview XSLT stylesheets
location: https://github.com/wendellpiez/JATSKit
description: This oXygen framework supports editing JATS articles (v1.1) ... Included are DTDs, CSS files for authoring, document templates, XSLT stylesheets and other utilities for editing of JATS XML and production of HTML, PDF (preview) and EPUB outputs.
notes:
    - discovered while debugging problems in the NCBI NLM fo outputs
    - different stylesheets will generate different fo files which may have fewer issues being transformed into PDF files

---
type:elife-xml-to-pdf-candidate
name: Paged Media
location: https://print-css.rocks/intro.html
description: CSS Paged Media (a W3C standard) is a way to generate PDF documents from XML/HTML as input and CSS for styling.
references:
    - https://www.zopyx.com/news/print-css-rocks-pdf-converter-comparison
examples:
    - https://print-css.rocks/references.html
notes:
    - website is a front for a for-profit proprietary-orientated organisation "zopyx"
    - all examples are using proprietary and expensive technology
    - paged media is still quite immature right now
    - no wikipedia page?
    - doubtful of consistency of rendering going forwards
---
type:elife-xml-to-pdf-candidate
name: elife article-json to pdf 
description: uses elife's article-json generator to create a JSON structure and then [some custom tool] to generate a PDF
---
type:elife-xml-to-pdf-candidate
name: peerj jats-converstion to html, html to pdf
description: This repository contains: XSL files for conversion from JATS XML to various other formats.
notes:
    - simpler example of converting from jats to html and then html to pdf than cassius
---
type: tool
name: weasyprint
description: python html->pdf tool
notes:
    - couldn't install a headless version (i.e. it pulled in all of xorg with libpango1.0)
    - generated PDF out of the box isn't any better or worse than wkhtmlpdf
    - wkhtmlpdf doesn't come with a boatload of dependencies however
    - there are some opinions that it is less robust than wkhtmlpdf and fails randomly
---
type:document,filename:README.md
content-type:markdown
content: <<EOF
# JATS->PDF

A review of the current state of automated JATS XML to PDF conversion tools.

## goals

* evaluate suitable *open source* tools
* test ~10 representative articles
* state a recommendation
* state why others should not be recommended

## dimensions

* speed - average speed from XML->PDF
* complexity - number of technologies involved
* extensibility - modifying the technologies to alter the PDF appearance
* robustness - how well the stack handles errors and a variety of inputs
* support - likelihood of finding answers to difficult questions

## targets

* pandoc
* cassius
* official jats-xslt-stylesheets

## results

See [results](results.md)

## installation

Requirements

* Docker is used to describe the environments each candidate is run in
* public eLife article data

## running all transformations

Article data can be downloaded with:

    ./download-articles.sh
    
The initial environment can be built with:

    ./run.sh

This will build the Docker images and create a file `built.flag` that prevents the containers from being built by `./run.sh` again.

Use `./run.sh` again to start the testing process.

Generated pdf files are copied to the directory `./pdf/` as `transformer--article-id.pdf`.

stdout and stderr are written to `./log/` as `transformer--article-id.log`

## running individual transformations

Each candidate has it's own `build.sh`, `run.sh`, `shell.sh` and `transform.sh` scripts.

* `./build.sh` will tell Docker to build the current Dockerfile
* `./run.sh` accepts an input xml file or article directory and an output pdf filename
* `./transform.sh` is copied into the container during the build and executed during the run`
* `./shell.sh` will drop you into a shell within the Docker container for debugging

For example:

    cd pandoc
    ./build.sh
    ./run.sh /path/to/article.xml article.pdf

The artifacts of a transformation live in the `./mnt` directory. This directory is shared with the Docker container and
is available within the container as `/mnt` (note the missing leading `.`).


---
type:document
content-type: markdown
content: <<EOF
# Automated JATS XML to PDF conversion

## introduction

JATS is a specification for describing articles. The specification is clear on how articles must be described however it's possible for the same article to be described in different ways by different authors and still fulfill the requirements of the specification. Authors themselves may also vary how they describe documents over time. This introduces the problem of how to treat JATS documents uniformly across authors and time so that all instances of JATS articles may benefit from common tools.

Converting JATS XML to PDF is a very common problem. eLife has the final PDF version of an article hand-made like most other publishers.

This is done because:

* automated conversions do not *quite* approach the precision of manual print design
* most articles are not read on the publisher's site in HTML form but in PDF or printed form elsewhere. The quality of this PDF is often the first impression the author's intended audience receives.
* authors often feel the version of their submitted article to be the best formatted version and any clumsiness introduced with an automated approach to be a personal affront and a black mark against the publisher's reputation.
* the tools for the creation of hand-crafted PDF files has become relatively quick and convenient to use.
* it's cheap to outsource this labour
* expertise in the lower-level programming languages that automate this process is relatively rare

Attached to this report are different tools and technologies that help to achieve this goal of automated JATS to PDF conversion. Each approach has it's trade-offs and each is complex, requiring knowledge of multiple technologies.

This report is an evaulation of these technologies with a view to adoption during the article production process at eLife to:

* remove vendor dependency
* remove ability for authors to request changes to PDF
* share our work with other publishers

## approach

Two perspectives can be taken at the outset:

1. a member of the production team involved in producing a final article PDF
2. a developer tasked with converting JATS to PDF

A production staff member cares about the articles being processed *right now* and less about those previously published. Should the conversion process be unsatisfactory then the production process for that article stalls and either the conversion program is fixed by a developer or the PDF is generated by hand. Ideally these faults during production should be obvious, rare and able to be fixed quickly.

A developer looks at the thousands of articles published in XML and their hand-crafted PDF counterparts and wonders just how close to the original PDF they can get. It's unlikely a PDF of perfect fidelty can be generated by a program, but with the correct measurements the accuracy to the original can be known. This will be valuable when testing convertors. The very best converters will have high fidelty on individual articles but also uniformly across a large representative proportion of the article corpus.

## dimensions

1. ease and convenience of styling the pdf.
2. stability of underlying technologies that affect rendered results
3. speed, faster is better.
4. indirection. how far removed from the transformations are we? 
5. precision. how closely can we affect the PDF?

## results

The following were tested:

* CaSSius
* jats2latex
* jats-xslt-stylesheets
* pandoc
* peerj-jats-conversion

None of the above is a single technology and all fall in to one of these categories:

* `XML->HTML->PDF` (CaSSius, peerj-jats-conversion)
* `XML->LaTeX->PDF` (pandoc, jats2latex)
* `XML->XSL-FO->PDF` (jats-xslt-stylesheets)

The transformation from `JATS XML` to HTML and LaTeX required an intermediate scraper that navigated XML and produced HTML or LaTex.

The transformation from JATS XML to XSL-FO objects required XSL, a transformation language specified described in XML.

jats2latex failed to produce anything for any document it was tested on. I believe it was developed for a particular vendor's flavour of JATS XML and wasn't robust enough to handle variations. Upon inspection it was just a heap of custom scraping code in a language not well suited to the task (Java). I've excluded it from hereonout.

The official jats-xslt-stylesheets that included XSL-FO style has produced just a single successful result. There is not enough here to make any judgements on XSL-FO's suitability at all.

The remaining tools are CaSSius, peerj-jats-conversion (both XML->HTML->PDF conversions) and Pandoc (XML->LaTeX->PDF).

The results have no images in them. This is because special eLife pre-processing of the XML is required to expand the image tags

### CaSSius (HTML->PDF)

CaSSius is an attempt to use bleeding edge web technologies that have little/inconsistent/no support in browsers using [Polyfills](https://en.wikipedia.org/wiki/Polyfill_(programming)) to generate beautiful PDF files using otherwise plain old HTML and CSS. 

CaSSius works by passing JATS XML through an XSL stylesheet to generate a rough-and-ready HTML document. The HTML has some CaSSius stylesheets and javascript in it that can be modified and inspected easily on smaller articles. The HTML is then passed to `wkhtmltopdf` ("Webkit HTML to PDF"), a headless browser, that executes the javascript and generates the PDF.

Unfortunately CaSSius fails to produce anything more than the single leading page across all documents. That said, that single page is attractively styled. Debugging the running javascript didn't reveal anything and attempting different methods of generating the PDF from the HTML, including simply opening it up in a browser and 'printing to pdf' all produced similar effects, if it worked at all. It often crashed on larger articles or was too sluggish to inspect.

### peerj-jats-conversion (HTML->PDF)

PeerJ have a repository of tools and stylesheets used for validation and converting their own JATS XML to HTML. The conversion to PDF is done just like CaSSius and uses `wkhtmltopdf`. The results have no special styling but it demonstrates that basic HTML to PDF can work well, that PDF bookmarks are present and that XSL transformations (CaSSius, PeerJ) are more robust and complete than scraper code (jats2latex).

### Pandoc

Pandoc is exceptional software. It 


### 1. ease and convenience of styling the pdf.

With `1` being easy and `5` being "gruelling"

* HTML to PDF



EOF

